{"version":3,"sources":["cartoon-eyes.svg","App.tsx","index.tsx"],"names":["gridWidth","cells","Array","gridHeight","fill","undefined","map","val","idx","defaultSnekSize","length","randomFood","snake","nonSnakeCells","filter","item","includes","Math","floor","random","App","useState","tick","setTick","setSnake","direction","setDirection","food","setFood","speed","gameover","setGameover","pawsed","setPawsed","useEffect","body","newHead","position","trueX","newPosition","up","down","left","right","moveHead","console","log","newSnek","setTimeout","getBlockedDirection","currentChunk","diff","getPreviousSnakeChunk","snakeIndex","indexOf","getNextSnakeChunk","className","onKeyDown","event","ArrowLeft","ArrowRight","ArrowDown","ArrowUp","a","d","s","w","A","D","S","W","key","blocked","tabIndex","onBlur","onFocus","style","height","width","src","eyes","onClick","newSkek","restartGame","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c31c660e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cartoon-eyes.7394ad93.svg\";","import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { FaBug, FaRegMehRollingEyes } from \"react-icons/fa\";\nimport eyes from './cartoon-eyes.svg';\n\nconst gridWidth = 30;\nconst gridHeight = 30;\nconst cells = new Array(gridHeight * gridWidth)\n  .fill(undefined)\n  .map((val, idx) => idx);\n\ntype Direction = \"up\" | \"down\" | \"left\" | \"right\";\n\nconst defaultSnekSize = [\n  cells.length / 2 + gridWidth / 2,\n  cells.length / 2 + gridWidth / 2 + 1,\n  cells.length / 2 + gridWidth / 2 + 2,\n];\n\nconst moveHead = (position: number, direction: Direction) => {\n  const trueX = position % gridWidth;\n  const trueY = Math.floor(position / gridWidth);\n\n  const steps = {\n    up: -gridWidth,\n    down: gridWidth,\n    left: -1,\n    right: 1,\n  };\n\n  const newPosition = position + steps[direction];\n  if (direction === \"right\" && trueX === gridWidth - 1)\n    return position - gridWidth + 1;\n  if (direction === \"left\" && trueX === 0) return position + gridWidth - 1;\n  if (newPosition < 0) return cells.length + newPosition;\n  if (newPosition > cells.length) return newPosition - cells.length;\n\n  return newPosition;\n};\n\nconst randomFood = (snake: number[]) => {\n  const nonSnakeCells = cells.filter((item) => !snake.includes(item));\n  const randomIdx = Math.floor(Math.random() * nonSnakeCells.length);\n  return nonSnakeCells[randomIdx];\n};\n\nconst App = () => {\n  const [tick, setTick] = useState<number>(0);\n  const [snake, setSnake] = useState(defaultSnekSize);\n  const [direction, setDirection] = useState<Direction>(\"right\");\n  const [food, setFood] = useState(randomFood(snake));\n  const speed = 500 / snake.length;\n  const [gameover, setGameover] = useState<boolean>(false);\n  const [pawsed, setPawsed] = useState<boolean>(true);\n\n  useEffect(() => {\n    if (pawsed) {\n      return;\n    }\n    const [tail, ...body] = snake;\n    const head = snake[snake.length - 1];\n    const newHead = moveHead(head, direction);\n    if (body.includes(newHead)) {\n      setGameover(true);\n      console.log(gameover);\n      return;\n    }\n    if (newHead === food) {\n      const newSnek = [...snake, newHead];\n      setSnake(newSnek);\n      setFood(randomFood(newSnek));\n    } else setSnake([...body, newHead]);\n    setTimeout(() => {\n      setTick(tick + 1);\n    }, speed);\n  }, [tick, pawsed]);\n\n  const restartGame = () => {\n    setTick(0);\n    setGameover(false);\n    const newSkek = defaultSnekSize;\n    setSnake(newSkek);\n    setFood(randomFood(newSkek));\n    setDirection(\"right\");\n    console.log(\"Game restarted\");\n  };\n\n  const handleKeyPress = (event: React.KeyboardEvent<HTMLDivElement>) => {\n    const keyMap: { [key: string]: Direction } = {\n      ArrowLeft: \"left\",\n      ArrowRight: \"right\",\n      ArrowDown: \"down\",\n      ArrowUp: \"up\",\n      a: \"left\",\n      d: \"right\",\n      s: \"down\",\n      w: \"up\",\n      A: \"left\",\n      D: \"right\",\n      S: \"down\",\n      W: \"up\",\n    };\n    const direction = keyMap[event.key];\n    const blocked = getBlockedDirection();\n    if (direction && direction !== blocked) {\n      setDirection(direction);\n    } else {\n      console.log('blocked');\n    }\n  };\n\n  const getBlockedDirection = () => {\n    const currentChunk = snake[snake.length - 1];\n    if (snake.length > 1) {\n      const nextChunk = snake[snake.length - 2];\n      const diff = currentChunk - nextChunk;\n      if (diff === 1 || diff === -gridWidth + 1) {\n        return \"left\";\n      }\n      if (diff === -1 || diff === gridWidth - 1) {\n        return \"right\";\n      }\n      if (diff === gridWidth || diff === -cells.length + gridWidth) {\n        return \"up\";\n      }\n      if (diff === -gridWidth || diff === cells.length - gridWidth) {\n        return \"down\";\n      }\n    }\n  };\n\n  const getPreviousSnakeChunk = (idx: number) => {\n    const snakeIndex = snake.indexOf(idx);\n    const currentChunk = snake[snakeIndex];\n    if (snakeIndex > 0) {\n      const nextChunk = snake[snakeIndex - 1];\n      const diff = currentChunk - nextChunk;\n      if (diff === 1 || diff === -gridWidth + 1) {\n        return \"left\";\n      }\n      if (diff === -1 || diff === gridWidth - 1) {\n        return \"right\";\n      }\n      if (diff === gridWidth || diff === -cells.length + gridWidth) {\n        return \"up\";\n      }\n      if (diff === -gridWidth || diff === cells.length - gridWidth) {\n        return \"down\";\n      }\n    }\n    return undefined;\n  };\n\n  const getNextSnakeChunk = (idx: number) => {\n    const snakeIndex = snake.indexOf(idx);\n    const currentChunk = snake[snakeIndex];\n    if (snakeIndex < snake.length - 1) {\n      const nextChunk = snake[snakeIndex + 1];\n      const diff = currentChunk - nextChunk;\n      if (diff === 1 || diff === -gridWidth + 1) {\n        return \"left\";\n      }\n      if (diff === -1 || diff === gridWidth - 1) {\n        return \"right\";\n      }\n      if (diff === gridWidth || diff === -cells.length + gridWidth) {\n        return \"up\";\n      }\n      if (diff === -gridWidth || diff === cells.length - gridWidth) {\n        return \"down\";\n      }\n    }\n    return undefined;\n  };\n\n  return (\n    <>\n      <div\n        className=\"cell-container\"\n        onKeyDown={handleKeyPress}\n        tabIndex={0}\n        onBlur={() => setPawsed(true)}\n        onFocus={() => setPawsed(false)}\n      >\n        {cells.map((val, idx) => (\n          <div\n            className={`cell ${snake.includes(idx) ? \"snake-cell\" : \"\"} ${\n              food === idx ? \"food\" : \"\"\n            }`}\n            style={{\n              height: `${100 / gridHeight}%`,\n              width: `${100 / gridWidth}%`,\n            }}\n          >\n            {snake.includes(idx) && (\n              <div\n                className={`snake ${getPreviousSnakeChunk(\n                  idx\n                )} ${getNextSnakeChunk(idx)}`}\n              >\n                {idx === snake[snake.length - 1] ? <img style={{ width: '100%', height: '100%' }} src={eyes} /> : \"\"}\n              </div>\n            )}\n            {food === idx ? <FaBug /> : \"\"}\n          </div>\n        ))}\n        <div className=\"score\">\n          Score: {snake.length - defaultSnekSize.length}\n        </div>\n        <div className=\"gameover\" onClick={() => restartGame()}>\n          {gameover ? \"You lost, click here to restart\" : \"\"}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}